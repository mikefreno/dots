# ===================================================================
# SERVICE 1: Jellyfin Media Server
# DOMAINS:   jellyfin.freno.me, mikefreno.tplinkdns.com
# BACKEND:   http://127.0.0.1:8096
# ===================================================================

# --- HTTP to HTTPS Redirect for both domains ---
server {
    listen 80;
    # Listen on both server names
    server_name jellyfin.freno.me mikefreno.tplinkdns.com;
    return 301 https://$host$request_uri;
}

# --- Main HTTPS Server Block for Jellyfin ---
server {
    listen 443 ssl http2;
    server_name jellyfin.freno.me mikefreno.tplinkdns.com;

    ssl_certificate /etc/letsencrypt/live/jellyfin.freno.me/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/jellyfin.freno.me/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    client_max_body_size 10G;

    location / {
        proxy_pass http://127.0.0.1:8096;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /socket {
        proxy_pass http://127.0.0.1:8096;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }
}


# ===================================================================
# SERVICE 2: Vaultwarden
# DOMAIN:    vw.freno.me
# BACKEND:   http://127.0.0.1:8081
# ===================================================================

server {
    if ($host = vw.freno.me) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name vw.freno.me;
    return 301 https://$server_name$request_uri;


}

server {
    listen 443 ssl http2;
    server_name vw.freno.me;

    location / {
        proxy_pass http://127.0.0.1:8081;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /notifications/hub {
        proxy_pass http://127.0.0.1:8081;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    ssl_certificate /etc/letsencrypt/live/vw.freno.me/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/vw.freno.me/privkey.pem; # managed by Certbot
}


# ===================================================================
# SERVICE 3: OpenWebUI + direct API
# DOMAIN:    ai.freno.me
# BACKEND:   http://127.0.0.1:8082
# ===================================================================

server {
    if ($host = ai.freno.me) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name ai.freno.me;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name ai.freno.me;

    client_max_body_size 100M;

	location / {
	    proxy_pass http://127.0.0.1:8082;
	    proxy_set_header Host $host;
	    proxy_set_header X-Real-IP $remote_addr;
	    proxy_set_header X-Forwarded-For
	    $proxy_add_x_forwarded_for;
	    proxy_set_header X-Forwarded-Proto $scheme;

	    proxy_http_version 1.1;
	    proxy_set_header Upgrade $http_upgrade;
	    proxy_set_header Connection "upgrade";

	    proxy_read_timeout 1800;
	    proxy_connect_timeout 1800;
	    proxy_send_timeout 1800;
	    send_timeout 1800;

	    proxy_buffering off;
	    proxy_request_buffering off;
	}

    ssl_certificate /etc/letsencrypt/live/ai.freno.me/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/ai.freno.me/privkey.pem; # managed by Certbot
}

# ===================================================================
# SERVICE 4: lm studio
# DOMAIN:    lm.freno.me
# BACKEND:   http://127.0.0.1:8084
# ===================================================================

server {
    if ($host = lm.freno.me) {
        return 301 https://$host$request_uri;
    } # managed by Certbot



    listen 80;
    server_name lm.freno.me;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name lm.freno.me;

    client_max_body_size 10G;
    proxy_socket_keepalive on;

location / {
    auth_request /auth;
    auth_request_set $auth_status
    $upstream_status;

    proxy_pass http://atlas.local:8084;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For
    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;


    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    proxy_read_timeout 1800;
    proxy_connect_timeout 1800;
    proxy_send_timeout 1800;
    send_timeout 1800;

    # Add streaming optimizations
    proxy_buffering off;
    proxy_request_buffering off;
}

    location = /auth {
        internal;
        proxy_pass http://127.0.0.1:9000;
        proxy_set_header  X-Original-URI $request_uri;

        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

    	proxy_set_header Authorization $http_authorization;
    }

    ssl_certificate /etc/letsencrypt/live/lm.freno.me/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/lm.freno.me/privkey.pem; # managed by Certbot
}

# ===================================================================
# SERVICE 5: File Browser
# DOMAIN:    files.freno.me
# BACKEND:   http://127.0.0.1:8083
# ===================================================================

server {
    if ($host = files.freno.me) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name files.freno.me;
    return 301 https://$server_name$request_uri;


}

server {
    listen 443 ssl http2;
    server_name files.freno.me;

    location / {
        # This points to your new File Browser container
        proxy_pass http://127.0.0.1:8083;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    ssl_certificate /etc/letsencrypt/live/files.freno.me/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/files.freno.me/privkey.pem; # managed by Certbot
}


# ===================================================================
# SERVICE 6: Comfy (ai image pipeline)
# DOMAIN:    comfy.freno.me
# BACKEND:   http://atlas.local:8188;
# ===================================================================


server {
    if ($host = comfy.freno.me) {
	return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    server_name comfy.freno.me;
    return 301 https://$server_name$request_uri;


}

server {
    listen 443 ssl http2;
    server_name comfy.freno.me;

    location / {
	proxy_pass http://atlas.local:8188;
	proxy_set_header Host $host;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Proto $scheme;

	auth_basic "Restricted Access";
	auth_basic_user_file /etc/nginx/.htpasswd;
    }

    ssl_certificate /etc/letsencrypt/live/comfy.freno.me/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/comfy.freno.me/privkey.pem; # managed by Certbot
}

# ===================================================================
# SERVICE 7: Nextcloud
# DOMAIN:    nc.freno.me
# BACKEND:   http://127.0.0.1:8085
# ===================================================================


server {
    listen 80;
    server_name nc.freno.me;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name nc.freno.me;

    location / {
	proxy_pass http://127.0.0.1:8085;
	proxy_set_header Host $host;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header X-Forwarded-Proto $scheme;
    }
}

