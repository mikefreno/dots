;======================Left Bar===================;
;======================(vibes)====================;
(defwindow leftbar
	:namespace "leftbar"
  :monitor 0
  :stacking "bg"
  :windowtype "normal"
  :wm-ignore true
  :geometry (geometry
	:y "10%"
	:x "1%"
	:width "20%"
        :height "80%")
  (leftbarlayout))

(defwidget leftbarlayout []
	(box 
		:spacing 5
		:vexpand true
		:hexpand true
		:valign "center"
		:halign "start"
		:space-evenly true
		(box (system))
		(box (clock))
))


(deflisten temp :initial "--"
  `tail -F /tmp/weather-temp`)

(defwidget diskinfo []
  (box ))

(defwidget weather [] 
  (box ))

;; system
(defpoll HOST :interval "10m" `hostname`)
(defpoll CPU_USAGE :interval "1s" `scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `scripts/sys_info --mem`)
;(defpoll BLIGHT :interval "1s" `scripts/sys_info --blight`)

(defwidget system [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "cpu_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconcpu" :text "")
				(scale :min 0 :max 100 :value CPU_USAGE :active "false"))
			(box :class "mem_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconmem" :text "")
				(scale :min 0 :max 100 :value MEM_USAGE :active "false"))
			;(box :class "bright_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				;(label :class "iconbright" :text "")
				;(scale :min 0 :max 100 :value BLIGHT :active "false"))
			)))

;; clock
(defpoll HOUR :interval "5s" `date +\"%I\"`)
(defpoll MIN :interval "5s" `date +\"%M\"`)
(defpoll MER :interval "5s" `date +\"%p\"`)
(defpoll DAY :interval "5s" `date +\"%A\"`)

(defwidget clock [] 
	(box :class "genwin" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false" 
		(box :orientation "h" :spacing 0
			(label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text HOUR)
			(label :class "time_min" :valign "end" :wrap "true" :limit-width 25 :text MIN))
		(box :orientation "v" :spacing 0 
			(label :class "time_mer" :valign "start" :halign "end" :wrap "true" :limit-width 25 :text MER)
			(label :class "time_day" :valign "end" :halign "end" :wrap "true" :limit-width 25 :text DAY))))

;; uptime
(defpoll UPHOUR :interval "5s" `uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'`)
(defpoll UPMIN :interval "5s" `uptime -p | awk '{print $4 \" \" $5}'`)
(defwidget uptime [] 
	(box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :class "icontimer" :valign "center" :text "祥")
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
				(label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)))))

;; Music
(defpoll SONG :interval "1s" `scripts/music_info --song`)
(defpoll ARTIST :interval "1s" `scripts/music_info --artist`)
(defpoll STATUS :interval "1s" `scripts/music_info --status`)
(defpoll CURRENT :interval "1s" `scripts/music_info --time`)
(defpoll COVER :interval "1s" `scripts/music_info --cover`)
(defpoll CTIME :interval "1s" `scripts/music_info --ctime`)
(defpoll TTIME :interval "1s" `scripts/music_info --ttime`)
(defwidget music [] 
	(box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
		(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
			(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "btn_prev" :onclick "scripts/music_info --prev" "玲")
				(button :class "btn_play" :onclick "scripts/music_info --toggle" STATUS)
				(button :class "btn_next" :onclick "scripts/music_info --next" "怜"))
			(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" 
				(scale :onscroll "mpc -q seek +1" :min 0 :active "true" :max 100 :value CURRENT)))))




;=====================Bottom Bar==================;
;=================(system controls)===============;
(defwindow bottombar
  :monitor 0
  :stacking "bg"
  :windowtype "normal"
  :wm-ignore true
  :geometry (geometry
	:width "100%"
        :height "80%")
  (buttons 
       :shutdown "shutdown now" 
       :reboot "reboot"
       :suspend "systemctl suspend"
       :hibernate "systemctl hibernate"
       :logout "hyprctl exit"
       :shutdown_icon ""
       :reboot_icon ""
       :suspend_icon ""
       :hibernate_icon ""
       :logout_icon "󰞘"))

(defwidget buttons [shutdown shutdown_icon
		    reboot reboot_icon
		    suspend suspend_icon
		    hibernate hibernate_icon
		    logout logout_icon]
  (box 
    :class "btns-box"
    :spacing 5
    :vexpand true
    :hexpand true
    :valign "end"
    :halign "center"
    :space-evenly true
    (button :tooltip "Shutdown" :onclick shutdown shutdown_icon )
    (button :tooltip "Reboot" :onclick reboot reboot_icon)
    (button :tooltip "Suspend" :onclick suspend suspend_icon)
    (button :tooltip "Hibernate" :onclick hibernate hibernate_icon)
    (button :tooltip "Logout" :onclick logout logout_icon)))
